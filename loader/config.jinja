{% set LOADER = env["name"] + "-" + env["deployment"] %}
{% set LOADER_INSTANCE_TEMPLATE = LOADER + "-it"  %}
{% set LOADER_INSTANCE_GROUP = LOADER + "-ig" %}
{% set JOB_ID = env["deployment"] %}

resources:
- name: {{ LOADER_INSTANCE_TEMPLATE }}
  type: compute.v1.instanceTemplate
  properties:
    project: {{ env["project"] }}
    properties:
      machineType: {{ properties["machine_type"]["loader"] }} 
      disks:
      - deviceName: boot
        type: PERSISTENT
        boot: true
        autoDelete: true
        initializeParams:
          sourceImage: {{ properties["image"] }}
      networkInterfaces:
      - network: https://www.googleapis.com/compute/v1/projects/{{ env["project"] }}/global/networks/default
        accessConfigs:
        - name: External NAT
          type: ONE_TO_ONE_NAT
      serviceAccounts: 
      - email: "default"
        scopes: 
        - "https://www.googleapis.com/auth/devstorage.full_control" 
      tags:
        items:
        - loader
      metadata:
        items:
        - key: startup-script
          value: |
            #! /bin/bash

            # Install wrk
            apt-get install -y git build-essential libssl-dev
            cd /opt
            git clone https://github.com/wg/wrk.git
            cd /opt/wrk
            make

            # Set params for load test
            loaders={{properties["loader_servers"]}}
            nprocs=`nproc`
            threads=$((nprocs * 2))
            conns=$((threads * 50))
            target={{ properties["target"] }}
            duration={{ properties["test_duration"] }}
            job_id={{ JOB_ID }}
            report=/opt/wrk/report.lua
            zone=$(curl -s -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/zone" | grep -o [[:alnum:]-]*$)

            # Lua script to format output
            cat <<EOF > /opt/wrk/report.lua
            done = function(summary, latency, requests)
             io.write("JSON\n\n")
             io.write("{")
             io.write(string.format("\"%s\":\"%s\", ", "latency_min", latency.min/1000.00))
             io.write(string.format("\"%s\":\"%s\", ", "latency_max", latency.max/1000.00))
             io.write(string.format("\"%s\":\"%s\", ", "latency_mean", latency.mean/1000.00))
             io.write(string.format("\"%s\":\"%s\", ", "latency_stdev", latency.stdev/1000.00))
             io.write(string.format("\"%s\":\"%s\", ", "latency_p50", latency:percentile(50)/1000.00))
             io.write(string.format("\"%s\":\"%s\", ", "latency_p90", latency:percentile(90)/1000.00))
             io.write(string.format("\"%s\":\"%s\", ", "latency_p99", latency:percentile(99)/1000.00))

             io.write(string.format("\"%s\":\"%s\", ", "requests_min", requests.min))
             io.write(string.format("\"%s\":\"%s\", ", "requests_max", requests.max))
             io.write(string.format("\"%s\":\"%s\", ", "requests_mean", requests.mean))
             io.write(string.format("\"%s\":\"%s\", ", "requests_stdev", requests.stdev))
             io.write(string.format("\"%s\":\"%s\", ", "requests_p50", requests:percentile(50)))
             io.write(string.format("\"%s\":\"%s\", ", "requests_p90", requests:percentile(90)))
             io.write(string.format("\"%s\":\"%s\", ", "requests_p99", requests:percentile(99)))

             io.write(string.format("\"%s\":\"%s\", ", "summary_duration", summary.duration))
             io.write(string.format("\"%s\":\"%s\", ", "summary_requests", summary.requests))
             io.write(string.format("\"%s\":\"%s\", ", "summary_bytes", summary.bytes))
             io.write(string.format("\"%s\":\"%s\", ", "summary_errors_connect", summary.errors.connect))
             io.write(string.format("\"%s\":\"%s\", ", "summary_errors_read", summary.errors.read))
             io.write(string.format("\"%s\":\"%s\", ", "summary_errors_write", summary.errors.write))
             io.write(string.format("\"%s\":\"%s\", ", "summary_errors_status", summary.errors.status))
             io.write(string.format("\"%s\":\"%s\"", "summary_errors_timeout", summary.errors.timeout))
             io.write("}")
            end
            EOF

            # Script that will be invoked by systemd to generate load and report it
            cat <<EOF > /opt/wrk/loader.sh

            load()
            {
            # Run test
            /opt/wrk/wrk  \
              -t$threads  \
              -c$conns    \
              -d$duration \
              -s$report   \
              $target
            }

            load | tail -1 > $(hostname).json
            cat <<IEOF > job.json
            {
                "timestamp": "{{properties["date_prefix"]}}",
                "deployment_id": "$job_id",
                "workers": "$loaders",
                "conns_per_worker": "$conns",
                "threads_per_worker": "$threads",
                "target": "$target",
                "duration": "$duration"
            }
            IEOF

            # Upload to GCS
            gsutil cp *.json {{properties["output_bucket"] + "/" + properties["date_prefix"] + "/"}}
            EOF

            cat <<EOF > /etc/systemd/system/loader.service
            [Unit]
            Description=loader
            [Service]
            ExecStart=/bin/sh /opt/wrk/loader.sh
            WorkingDirectory=/opt/wrk
            Restart=no
            LimitNOFILE=9999999
            [Install]
            WantedBy=multi-user.target
            EOF

            systemctl enable loader
            systemctl start loader

{% for zone in properties["zones"] %}
# Instance Group Manager for loader
- name: {{ LOADER_INSTANCE_GROUP + "-" + zone }}
  type: compute.v1.instanceGroupManager
  properties:
    zone: {{ zone }}
    targetSize: {{ properties["loader_servers"] }}
    baseInstanceName: {{ LOADER + "-" + zone }}
    instanceTemplate: $(ref.{{LOADER_INSTANCE_TEMPLATE }}.selfLink)
{% endfor %}
